@@ Start
@@ Define ENABLE_REFINE_RENEWAL
@@ Clientsource/Client/UserInterface/Locale_inc.h

+#define ENABLE_REFINE_RENEWAL

-- add to the file

@@ Clientsource/Client/UserInterface/PythonApplicationModule.cpp

-- add to the file

+#ifdef ENABLE_REFINE_RENEWAL
+	PyModule_AddIntConstant(poModule, "ENABLE_REFINE_RENEWAL", 1);
+#else
+	PyModule_AddIntConstant(poModule, "ENABLE_REFINE_RENEWAL", 0);
+#endif

@@ Client/pack/1 Sources/root/constinfo.py

-- add under imports

import app, chrmgr, item, net, player, os, json, _winreg

+if app.ENABLE_REFINE_RENEWAL:
+	IS_AUTO_REFINE = False
+	AUTO_REFINE_TYPE = 0
+	AUTO_REFINE_DATA = {
+		"ITEM" : [-1, -1],
+		"NPC" : [0, -1, -1, 0]
+	}

@@ Client/pack/1 Sources/root/game.py
@@ -1191,6 +1191,12 @@ def __PutItem(self, attachedType, attachedItemIndex, attachedItemSlotPos, attach
					self.stream.popupWindow.Open(localeInfo.EXCHANGE_FAILURE_EQUIP_ITEM, 0, localeInfo.UI_OK)Add commentMore actions
				else:
					if chr.IsNPC(dstChrID):
+						if app.ENABLE_REFINE_RENEWAL:
+							constInfo.AUTO_REFINE_TYPE = 2
+							constInfo.AUTO_REFINE_DATA["NPC"][0] = dstChrID
+							constInfo.AUTO_REFINE_DATA["NPC"][1] = attachedInvenType
+							constInfo.AUTO_REFINE_DATA["NPC"][2] = attachedItemSlotPos
+							constInfo.AUTO_REFINE_DATA["NPC"][3] = attachedItemCount
						net.SendGiveItemPacket(dstChrID, attachedInvenType, attachedItemSlotPos, attachedItemCount)Add commentMore actions
					else:
						net.SendExchangeStartPacket(dstChrID)

@@ -1866,10 +1872,14 @@ def CommandCloseMall(self):

	def RefineSuceededMessage(self):
		snd.PlaySound("sound/ui/make_soket.wav")
		self.PopupMessage(localeInfo.REFINE_SUCCESS)
		if app.ENABLE_EMOTION_EFFECT_WHILE_REFINE_ITEMS and not player.IsMountingHorse():
			net.SendChatPacket("/cheer")
+		if app.ENABLE_REFINE_RENEWAL:
+			self.interface.CheckRefineDialog(False)

	def RefineFailedMessage(self):
		snd.PlaySound("sound/ui/jaeryun_fail.wav")
		self.PopupMessage(localeInfo.REFINE_FAILURE)
		if app.ENABLE_EMOTION_EFFECT_WHILE_REFINE_ITEMS and not player.IsMountingHorse():
			net.SendChatPacket("/angry")
+		if app.ENABLE_REFINE_RENEWAL:
+			self.interface.CheckRefineDialog(True)

	def CommandCloseSafebox(self):
		self.interface.CommandCloseSafebox()

@@ Client/pack/1 Sources/root/interfacemodule.py
@@ -1704,3 +1704,7 @@ def OpenEscapeQuestionPopup(self):

-- add end of file
			if not self.wndEscapePopup:Add commentMore actions
				self.wndEscapePopup = uiescapepopup.EscapeManager()
			self.wndEscapePopup.OpenEscapePopup()

+	if app.ENABLE_REFINE_RENEWAL:
+		def CheckRefineDialog(self, isFail):
+			self.dlgRefineNew.CheckRefine(isFail)

@@ Client/pack/1_Sources/root/ui.py
def EnablePaste(flag):
	ime.EnablePaste(flag)

def GetHyperlink():
	return wndMgr.GetHyperlink()

+if app.ENABLE_REFINE_RENEWAL:
+	import math
+	MAIN_PATH = "d:/ymir work/ui/game/toggle_switch/"
+	class ToggleSwitch(Window):
+		def __init__(self):
+			Window.__init__(self)
+			self._Initialize()
+			self.CreateElements()
+			
+		def __del__(self):
+			Window.__del__(self)
+			self._Initialize()
+		
+		def _Initialize(self):
+			self.backgroundImage = None
+			self.checkImage = None
+			
+			self.eventFunc = { "ON_CHECK" : None, "ON_UNCHECK" : None, }
+			self.eventArgs = { "ON_CHECK" : None, "ON_UNCHECK" : None, }
+			
+			self.isChecked = False
+			self.animationProgress = 0
+			self.animationDuration = 10
+			self.isAnimating = False
+			
+			self.uncheckedXPosition = 0
+			self.checkedXPosition = 13
+			self.animationDistance = self.checkedXPosition - self.uncheckedXPosition
+		
+		def CreateElements(self):
+			self.backgroundImage = ImageBox()
+			self.backgroundImage.SetParent(self)
+			self.backgroundImage.AddFlag("not_pick")
+			self.backgroundImage.SetPosition(0, 0)
+			self.backgroundImage.LoadImage(MAIN_PATH + "bg.tga")
+			self.backgroundImage.Show()
+			
+			self.checkImage = ImageBox()
+			self.checkImage.SetParent(self.backgroundImage)
+			self.checkImage.AddFlag("not_pick")
+			self.checkImage.SetPosition(self.uncheckedXPosition, 0)
+			self.checkImage.LoadImage(MAIN_PATH + "unchecked.tga")
+			self.checkImage.Show()
+			
+			self.textInfo = TextLine()
+			self.textInfo.SetParent(self)
+			self.textInfo.SetPosition(0, 0)
+			self.textInfo.SetWindowHorizontalAlignRight()
+			self.textInfo.Show()
+			
+			self.SetSize(self.backgroundImage.GetWidth(), self.backgroundImage.GetHeight())
+			
+			self.backgroundImage.SetWindowHorizontalAlignCenter()
+			
+		def SetTextInfo(self, info, x = 50, y = 0):
+			if self.textInfo:
+				self.textInfo.SetText(info)
+				self.textInfo.SetPosition(x, y)
+			
+		def SetCheckStatus(self, flag):
+			if flag != self.isChecked:
+				self.isChecked = flag
+				self.StartAnimation()
+		
+		def GetCheckStatus(self):
+			if self.checkImage:
+				return self.isChecked
+				
+			return False
+			
+		def SetEvent(self, func, *args) :
+			result = self.eventFunc.has_key(args[0])		
+			if result :
+				self.eventFunc[args[0]] = func
+				self.eventArgs[args[0]] = args
+			else :
+				print "[ERROR] ui.py SetEvent, Can`t Find has_key : %s" % args[0]
+			
+		def OnMouseLeftButtonUp(self):
+			if not self.isAnimating:
+				self.isChecked = not self.isChecked
+				self.StartAnimation()
+	
+				if self.isChecked and self.eventFunc["ON_CHECK"]:
+					apply(self.eventFunc["ON_CHECK"], self.eventArgs["ON_CHECK"])
+				elif not self.isChecked and self.eventFunc["ON_UNCHECK"]:
+					apply(self.eventFunc["ON_UNCHECK"], self.eventArgs["ON_UNCHECK"])
+	
+		def StartAnimation(self):
+			self.isAnimating = True
+			self.animationProgress = 0
+			self.checkImage.Show()
+	
+		def OnRender(self):
+			if self.isAnimating:
+				self.animationProgress += 1
+				progress = float(self.animationProgress) / self.animationDuration
+	
+				if progress <= 1:
+					x_offset = int(math.sin(progress * math.pi / 2) * self.animationDistance)
+					
+					if self.isChecked:
+						self.checkImage.SetPosition(self.uncheckedXPosition + x_offset, 0)
+						self.checkImage.LoadImage(MAIN_PATH + "checked.tga")
+					else:
+						self.checkImage.SetPosition(self.checkedXPosition - x_offset, 0)
+						self.checkImage.LoadImage(MAIN_PATH + "unchecked.tga")
+				else:
+					self.isAnimating = False
+					self.animationProgress = 0
+					
+					if self.isChecked:
+						self.checkImage.SetPosition(self.checkedXPosition, 0)
+						self.checkImage.LoadImage(MAIN_PATH + "checked.tga")
+					else:
+						self.checkImage.SetPosition(self.uncheckedXPosition, 0)
+						self.checkImage.LoadImage(MAIN_PATH + "unchecked.tga")

RegisterToolTipWindow("TEXT", TextLine)

@@ Client/pack/1_Sources/root/uiinventory.py
@@ -991,6 +991,11 @@ def RefineItem(self, scrollSlotPos, targetSlotPos):

		if player.REFINE_OK != player.CanRefine(scrollIndex, targetSlotPos):
			returnAdd commentMore actions

+		if app.ENABLE_REFINE_RENEWAL:
+			constInfo.AUTO_REFINE_TYPE = 1
+			constInfo.AUTO_REFINE_DATA["ITEM"][0] = scrollSlotPos
+			constInfo.AUTO_REFINE_DATA["ITEM"][1] = targetSlotPos
+
		self.__SendUseItemToItemPacket(scrollSlotPos, targetSlotPos)
		return

@@ Client/pack/1_Sources/root/uirefine.py
@@ -233,6 +233,17 @@ def __LoadScript(self):
		self.itemImage = itemImageAdd commentMore actions

		self.titleBar.SetCloseEvent(ui.__mem_func__(self.CancelRefine))
+		if app.ENABLE_REFINE_RENEWAL:
+			self.checkBox = ui.ToggleSwitch()
+			self.checkBox.SetParent(self)
+			self.checkBox.SetPosition(-55, 90)
+			self.checkBox.SetWindowHorizontalAlignCenter()
+			self.checkBox.SetWindowVerticalAlignBottom()
+			self.checkBox.SetEvent(ui.__mem_func__(self.AutoRefine), "ON_CHECK", True)
+			self.checkBox.SetEvent(ui.__mem_func__(self.AutoRefine), "ON_UNCHECK", False)
+			self.checkBox.SetCheckStatus(constInfo.IS_AUTO_REFINE)
+			self.checkBox.SetTextInfo(localeInfo.KEEP_REFINE_WINDOW_OPEN, -10, 0)
+			self.checkBox.Show()
		self.isLoaded = True

	def __del__(self):

@@ -271,12 +282,27 @@ def Destroy(self):

		self.slotList = []Add commentMore actions
		self.children = []

+	if app.ENABLE_REFINE_RENEWAL:
+		def __InitializeOpen(self):
+			self.children = []
+			self.vnum = 0
+			self.targetItemPos = 0
+			self.dialogHeight = 0
+			self.cost = 0
+			self.percentage = 0
+			self.type = 0
+			self.xRefineStart = 0
+			self.yRefineStart = 0

	def Open(self, targetItemPos, nextGradeItemVnum, cost, prob, type):

		if False == self.isLoaded:
			self.__LoadScript()

-		self.__Initialize()
+		if app.ENABLE_REFINE_RENEWAL:
+			self.__InitializeOpen()
+		else:
+			self.__Initialize()

		self.targetItemPos = targetItemPos
		self.vnum = nextGradeItemVnum

@@ -357,7 +383,10 @@ def AppendMaterial(self, vnum, count):


	def UpdateDialog(self):Add commentMore actions
		newWidth = self.toolTip.GetWidth() + 60
-		newHeight = self.dialogHeight + 75
+		if app.ENABLE_REFINE_RENEWAL:
+			newHeight = self.dialogHeight + 105
+		else:
+			newHeight = self.dialogHeight + 75

		newHeight -= 8

@@ -405,6 +434,35 @@ def Accept(self):

		net.SendRefinePacket(self.targetItemPos, self.type)Add commentMore actions
		self.Close()

+	if app.ENABLE_REFINE_RENEWAL:
+		def AutoRefine(self, checkType, autoFlag):
+			constInfo.IS_AUTO_REFINE = autoFlag
+		
+		def CheckRefine(self, isFail):
+			if constInfo.IS_AUTO_REFINE == True:
+				if constInfo.AUTO_REFINE_TYPE == 1:
+					if constInfo.AUTO_REFINE_DATA["ITEM"][0] != -1 and constInfo.AUTO_REFINE_DATA["ITEM"][1] != -1:
+						scrollIndex = player.GetItemIndex(constInfo.AUTO_REFINE_DATA["ITEM"][0])
+						itemIndex = player.GetItemIndex(constInfo.AUTO_REFINE_DATA["ITEM"][1])
+						
+					#	chat.AppendChat(chat.CHAT_TYPE_INFO, "%d %d" % (itemIndex, int(itemIndex %10)))
+						if scrollIndex == 0 or (itemIndex % 10 == 8 and not isFail):
+							self.Close()
+						else:
+							net.SendItemUseToItemPacket(constInfo.AUTO_REFINE_DATA["ITEM"][0], constInfo.AUTO_REFINE_DATA["ITEM"][1])
+				elif constInfo.AUTO_REFINE_TYPE == 2:
+					npcData = constInfo.AUTO_REFINE_DATA["NPC"]
+					if npcData[0] != 0 and npcData[1] != -1 and npcData[2] != -1 and npcData[3] != 0:
+						itemIndex = player.GetItemIndex(npcData[1], npcData[2])
+						if (itemIndex % 10 == 8 and not isFail) or isFail:
+							self.Close()
+						else:
+							net.SendGiveItemPacket(npcData[0], npcData[1], npcData[2], npcData[3])
+				else:
+					self.Close()
+			else:
+				self.Close()

	def CancelRefine(self):
		net.SendRefinePacket(255, 255)
		self.Close()
